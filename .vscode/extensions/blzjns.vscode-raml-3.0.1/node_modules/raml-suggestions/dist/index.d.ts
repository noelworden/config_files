import completionProviderInterfaces = require('./completionProviderInterfaces');
/**
 * Editor state provider.
 */
export declare type IEditorStateProvider = completionProviderInterfaces.IEditorStateProvider;
/**
 * AST provider.
 */
export declare type IASTProvider = completionProviderInterfaces.IASTProvider;
/**
 * Provides virtual file system data
 */
export declare type IFSProvider = completionProviderInterfaces.IFSProvider;
/**
 * Completion suggestion.
 *
 * Suggestion may have all of text, description and displayText filled,
 * but may have only some of them.
 * Priority of the field to use for display: displayText, text.
 * Priority of the field to use for text replacement: text, displayText.
 */
export declare type Suggestion = completionProviderInterfaces.Suggestion;
/**
 * Direct analogue of JS parser FSResolver, introduced for compatibility.
 */
export declare type FSResolver = completionProviderInterfaces.FSResolver;
/**
 * Extended JS parser FSResolver, being able to provide more FS data.
 */
export declare type FSResolverExt = completionProviderInterfaces.FSResolverExt;
/**
 * Sets default editor state provider
 * @param editorStateProvider
 */
export declare function setDefaultEditorStateProvider(editorStateProvider: IEditorStateProvider): void;
/**
 * Sets default AST provider
 * @param astProvider
 */
export declare function setDefaultASTProvider(astProvider: IASTProvider): void;
/**
 * Sets default FS provider.
 * @param fsProvider
 */
export declare function setDefaultFSProvider(fsProvider: IFSProvider): void;
/**
 * Finds suggestions. Requires setDefaultEditorStateProvider and setDefaultFSProvider methods to be called first.
 * @returns {Suggestion[]} - list of suggestions
 */
export declare function suggestDefault(): Suggestion[];
/**
 * Finds suggestions.
 * @param editorState - editor state.
 * @param fsProvider - file system data provider.
 * @returns {Suggestion[]} - list of suggestions
 */
export declare function suggest(editorStateProvider: IEditorStateProvider, fsProvider: IFSProvider): Suggestion[];
/**
 * Finds suggestions.
 * @param editorState - editor state.
 * @param fsProvider - file system data provider.
 * @returns {Promise<Suggestion[]>}
 */
export declare function suggestAsync(editorState: IEditorStateProvider, fsProvider: IFSProvider): Promise<Suggestion[]>;
/**
 * Converts extended fs resolver to FS provider.
 * @param resolver
 * @returns {IFSProvider}
 */
export declare function getContentProvider(resolver: FSResolverExt): IFSProvider;
