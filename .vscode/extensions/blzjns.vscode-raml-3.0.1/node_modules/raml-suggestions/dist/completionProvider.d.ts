/// <reference path="../typings/main.d.ts" />
import parserApi = require("raml-1-parser");
import { IFSProvider } from "./completionProviderInterfaces";
import { IEditorStateProvider } from "./completionProviderInterfaces";
import { IASTProvider } from "./completionProviderInterfaces";
import { FSResolverExt } from "./completionProviderInterfaces";
import { Suggestion } from "./completionProviderInterfaces";
export declare class CompletionRequest {
    content: IEditorStateProvider;
    private prefixValue;
    async: boolean;
    promises: Promise<any[]>[];
    constructor(content: IEditorStateProvider);
    prefix(): string;
    setPrefix(value: string): void;
    valuePrefix(): string;
}
export declare class CompletionProvider {
    contentProvider: IFSProvider;
    currentRequest: CompletionRequest;
    astProvider: IASTProvider;
    level: number;
    constructor(contentProvider: IFSProvider, astProvider?: IASTProvider);
    suggest(request: CompletionRequest, doPostProcess?: boolean): any[];
    suggestAsync(request: CompletionRequest, doPostProcess?: boolean): Promise<any[]>;
}
export declare function suggest(editorState: IEditorStateProvider, fsProvider: IFSProvider, astProvider?: IASTProvider): Suggestion[];
export declare function suggestAsync(editorState: IEditorStateProvider, fsProvider: IFSProvider): Promise<Suggestion[]>;
export declare function valueCompletion(node: parserApi.hl.IParseResult, attr: parserApi.hl.IAttribute, request: CompletionRequest, provider: CompletionProvider): any[];
export declare function postProcess(providerSuggestions: any, request: CompletionRequest): any[];
export declare function getPrefix(request: CompletionRequest): string;
export declare function getContentProvider(resolver: FSResolverExt): IFSProvider;
