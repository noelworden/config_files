"use strict";
var completionProvider = require('./completionProvider');
var _editorStateProvider = null;
var _astProvider = null;
/**
 * Sets default editor state provider
 * @param editorStateProvider
 */
function setDefaultEditorStateProvider(editorStateProvider) {
    _editorStateProvider = editorStateProvider;
}
exports.setDefaultEditorStateProvider = setDefaultEditorStateProvider;
/**
 * Sets default AST provider
 * @param astProvider
 */
function setDefaultASTProvider(astProvider) {
    _astProvider = astProvider;
}
exports.setDefaultASTProvider = setDefaultASTProvider;
var _fsProvider = null;
/**
 * Sets default FS provider.
 * @param fsProvider
 */
function setDefaultFSProvider(fsProvider) {
    _fsProvider = fsProvider;
}
exports.setDefaultFSProvider = setDefaultFSProvider;
/**
 * Finds suggestions. Requires setDefaultEditorStateProvider and setDefaultFSProvider methods to be called first.
 * @returns {Suggestion[]} - list of suggestions
 */
function suggestDefault() {
    return completionProvider.suggest(_editorStateProvider, _fsProvider);
}
exports.suggestDefault = suggestDefault;
/**
 * Finds suggestions.
 * @param editorState - editor state.
 * @param fsProvider - file system data provider.
 * @returns {Suggestion[]} - list of suggestions
 */
function suggest(editorStateProvider, fsProvider) {
    return completionProvider.suggest(editorStateProvider, fsProvider);
}
exports.suggest = suggest;
/**
 * Finds suggestions.
 * @param editorState - editor state.
 * @param fsProvider - file system data provider.
 * @returns {Promise<Suggestion[]>}
 */
function suggestAsync(editorState, fsProvider) {
    return completionProvider.suggestAsync(editorState, fsProvider);
}
exports.suggestAsync = suggestAsync;
/**
 * Converts extended fs resolver to FS provider.
 * @param resolver
 * @returns {IFSProvider}
 */
function getContentProvider(resolver) {
    return completionProvider.getContentProvider(resolver);
}
exports.getContentProvider = getContentProvider;
//# sourceMappingURL=index.js.map